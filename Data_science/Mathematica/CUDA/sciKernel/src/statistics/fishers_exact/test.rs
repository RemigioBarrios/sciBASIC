
#[cfg(test)]
mod tests {
    use super::fishers_exact;

    fn fuzzy_eq(a: f64, b: f64) -> bool {
        (a - b).abs() < 0.000001
    }

    #[test]
    fn test_fishers_exact() {
        // 20 cases randomly generated via scipy.
        // ([a,b,c,d], less, greater, two-tail)
        let cases = [
            (
                [61, 118, 2, 1],
                0.27535061623455315,
                0.9598172545684959,
                0.27535061623455315,
            ),
            (
                [172, 46, 90, 127],
                1.0,
                6.662405187351769e-16,
                9.041009036528785e-16,
            ),
            (
                [127, 38, 112, 43],
                0.8637599357870167,
                0.20040942958644145,
                0.3687862842650179,
            ),
            (
                [186, 177, 111, 154],
                0.9918518696328176,
                0.012550663906725129,
                0.023439141644624434,
            ),
            (
                [137, 49, 135, 183],
                0.999999999998533,
                5.6517533666400615e-12,
                8.870999836202932e-12,
            ),
            (
                [37, 115, 37, 152],
                0.8834621182590621,
                0.17638403366123565,
                0.29400927608021704,
            ),
            (
                [124, 117, 119, 175],
                0.9956704915461392,
                0.007134712391455461,
                0.011588218284387445,
            ),
            (
                [70, 114, 41, 118],
                0.9945558498544903,
                0.010384865876586255,
                0.020438291037108678,
            ),
            (
                [173, 21, 89, 7],
                0.2303739114068352,
                0.8808002774812677,
                0.4027047267306024,
            ),
            (
                [18, 147, 123, 58],
                4.077820702304103e-29,
                0.9999999999999817,
                7.686224774594537e-29,
            ),
            (
                [116, 20, 92, 186],
                0.9999999999998267,
                6.598118571034892e-25,
                8.164831402188242e-25,
            ),
            (
                [9, 22, 44, 38],
                0.01584272038710196,
                0.9951463496539362,
                0.021581786662999272,
            ),
            (
                [9, 101, 135, 7],
                3.3336213533847776e-50,
                1.0,
                3.3336213533847776e-50,
            ),
            (
                [153, 27, 191, 144],
                0.9999999999950817,
                2.473736787266208e-11,
                3.185816623300107e-11,
            ),
            (
                [111, 195, 189, 69],
                6.665245982898848e-19,
                0.9999999999994574,
                1.0735744915712542e-18,
            ),
            (
                [125, 21, 31, 131],
                0.99999999999974,
                9.720661317939016e-34,
                1.0352129312860277e-33,
            ),
            (
                [201, 192, 69, 179],
                0.9999999988714893,
                3.1477232259550017e-09,
                4.761075937088169e-09,
            ),
            (
                [167, 184, 141, 28],
                7.045789653297585e-16,
                1.0,
                9.362858503272341e-16,
            ),
            (
                [194, 74, 141, 182],
                0.9999999999999848,
                1.2268868025030845e-12,
                1.8076995960009742e-12,
            ),
            (
                [124, 138, 159, 160],
                0.30153826772785475,
                0.7538974235759873,
                0.5601766196310243,
            ),
        ];

        for &(table, expected_left, expected_right, expected_two_tails) in cases.iter() {
            let p = fishers_exact(&table).unwrap();
            println!(
                "{:?} expect={},{},{} observed={},{},{}",
                table,
                expected_left,
                expected_right,
                expected_two_tails,
                p.less_pvalue,
                p.greater_pvalue,
                p.two_tail_pvalue
            );
            assert!(fuzzy_eq(p.less_pvalue, expected_left));
            assert!(fuzzy_eq(p.greater_pvalue, expected_right));
            assert!(fuzzy_eq(p.two_tail_pvalue, expected_two_tails));
        }

        match fishers_exact(&[std::i32::MAX as u32 + 1, 1, 1, 1]) {
            Err(e) => println!("Error: {}", e),
            _ => assert!(false), // Should have errored.
        }
    }
}
